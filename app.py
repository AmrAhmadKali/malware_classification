from flask import Flask, render_template, request
import subprocess as sp
import os
from werkzeug.utils import secure_filename
from flask import jsonify


UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'exe'}  # ToDo add more extensions

app = Flask(__name__)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
# Configurable to avoid Overflow : the size in bytes of the uploaded file
app.config['MAX_CONTENT_LENGTH'] = 200 * 1000 * 1000


@app.route('/')  # Demonstrator route
def index():
    return render_template('index.html')


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/result', methods=['GET', 'POST'])
def result():
    if request.method == 'POST':
        # check if the post request has the executable part
        if 'binary' not in request.files:
            return render_template('result.html', error='No file uploaded')
        file = request.files['binary']
        # If the user does not select a file, the browser submits an
        # empty file without a filename.
        if file.filename == '':
            return render_template('result.html', error='No file uploaded')

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)

            # preprocess the executable uploaded
            sp.Popen(['python', 'data_preprocess.py', '--bin_to_img', file_path])
            os.remove(file_path)
            # malware_detect2 call for transfer Learning Model
            sp.Popen(['python', 'detect_malware.py', '--transfer_conv_ml'])
    # if request.method is GET
    # The result that should be rendered is probably in LOG_DIR or csv exp_results_filename
    return  # ToDo: render the result template with an argument of the classification result and error to be false

#send status of analysis to server
@app.route('/checkStatus', methods=["POST"])
def getStatus():
    
    #TODO: add logic to check if analysis is finished

    resp = jsonify(finished=False)
    
    return resp
     
#receive link that was selected using context menu
@app.route('/receive', methods=['POST'])
def testreceive():
    link = request.json
    print(link)  
    return jsonify(result=link)

if __name__ == '__main__':
    app.run()
