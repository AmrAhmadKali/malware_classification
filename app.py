from flask import Flask, render_template, request
import subprocess as sp
import os
from werkzeug.utils import secure_filename
from flask import jsonify
import json


UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'exe'}  # ToDo add more extensions
global status


app = Flask(__name__)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
# Configurable to avoid Overflow : the size in bytes of the uploaded file
app.config['MAX_CONTENT_LENGTH'] = 200 * 1000 * 1000


@app.route('/')  # Demonstrator route
def index():
    return render_template('index.html')


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/result', methods=['GET', 'POST'])
def result():
    if request.method == 'POST':
        # check if the post request has the executable part
        if 'binary' not in request.files:
            return render_template('error.html', error='No file uploaded')
        file = request.files['binary']
        # If the user does not select a file, the browser submits an
        # empty file without a filename.
        if file.filename == '':
            return render_template('error.html', error='No file uploaded')

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)

            """
            thisdict = {
                "status": "started"
                }
            with open("status.json", "w") as f:
                json.dump(thisdict, f)
            """
            # preprocess the executable uploaded
            sp.Popen(['python', 'data_preprocess.py', '--bin_to_img', file_path])
            os.remove(file_path)
            # malware_detect2 call for transfer Learning Model
            sp.Popen(['python', 'detect_malware.py', '--transfer_conv_ml'])

            """
            thisdict = {
                "status": "finished"
                }
            with open("status.json", "w") as f:
                json.dump(thisdict, f)
            """
    # if request.method is GET
    # The result that should be rendered is probably in LOG_DIR or csv exp_results_filename
    return  # ToDo: render the result template with an argument of the classification result and error to be false


#receive link that was selected using context menu
@app.route('/receive', methods=['POST'])
def receive():
    link = request.json
    print(type(link))
    return jsonify(result=True)


#route to reset the status
@app.route('/reset', methods=["POST"])
def reset():
    thisdict = {
  "status": "notStarted"
}
    with open("status.json", "w") as f:
        json.dump(thisdict, f)
    return jsonify(result="test")


#route to check the Status of the analysis
@app.route('/checkStatus', methods=["POST"])
def ckeckStatus():
    f = open('status.json')
    data = json.load(f)
    return jsonify(data["status"])


#only for testing purposes
#Has to be implemented in def result() after starting the analysis process
@app.route("/testStart", methods=["POST"])
def test_start():
    print(request.json)
    thisdict = {
  "status": "started"
}
    with open("status.json", "w") as f:
        json.dump(thisdict, f)
    return jsonify(result="test2")


#only for testing purposes
#Has to be implemented after the analyisis has finished
@app.route("/testFinish", methods=["POST"])
def test_finish():
    print(request.json)
    thisdict = {
  "status": "finished"
}
    with open("status.json", "w") as f:
        json.dump(thisdict, f)
    return jsonify(result="test2")

#get result from result.json
@app.route("/getResult", methods=["POST"])
def getResult():
    return jsonify(result="test")
#load data from result.json and send result to extension

#    f = open('status.json')
#    data = json.load(f)
#    return jsonify(data)

@app.route('/uploader', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        f = request.files['file']
        print(f)
        is_malware = [False, f.filename]
        # f.save(secure_filename(f.filename))
        return render_template('result.html', result=is_malware)



if __name__ == '__main__':
    app.run()
