from models.CnnModels import *
from models.AnnModels import *
from models.RnnModels import *
from data_utils.data_loaders import *
from models.model_trainers_testers import *
from sklearn.model_selection import GridSearchCV
import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
import itertools


def get_deep_rnn_expr_list(print_grid=True, simple_list=True):

    if simple_list:
        get_deep_rnn_expr_list = [
            {
                'experiment_name': 'rnn_experiment_1',
                'model_name': 'RNNMalware_Model1',
                'batch_size': 512,
                'embedding_dim': 256,
                'hidden_dim': 256,
                'epochs': 50,
                'lr': 0.001,
                'num_layers': 1,
                'bidirectional': False,
                'dropout': 0,
            }
        ]
        return get_deep_rnn_expr_list
    get_deep_rnn_expr_grid = [
        {
            'experiment_name': 'rnn_experiment_1',
            'model_name': 'RNNMalware_Model1',
            'batch_size': 512,
            'embedding_dim': 256,
            'hidden_dim': 128,
            'epochs': 50,
            'lr': 0.0001,
            'num_layers': 1,
            'bidirectional': False,
            'dropout': 0,
        }

    ]

    return get_deep_rnn_expr_grid


def get_deep_feedforward_expr_list(print_grid=True, simple_list=True):
    """
    Generate list of dictionary with following format
    {
            'experiment_name': 'experiment_3',
            'model_name': 'ANNMalware_Model2',
            'batch_size': 2,
            'image_dim': 256,
            'epochs': 5,
            'lr': 0.001
    }
    """
    get_deep_feedforward_expr_grid = {
        'model_name': ['ANNMalware_Model1', 'ANNMalware_Model2', 'CNNMalware_Model1', 'CNNMalware_Model2'],
        'batch_size': [256],
        'image_dim': [64, 128, 256, 512, 1024],
        'epochs': [50],
        'lr': [0.001, 0.0001]
    }

    if print_grid:
        print_line()
        print(f'Experiments Grid')
        print(get_deep_feedforward_expr_grid)
        print_line()

    if simple_list:
        get_deep_feedforward_expr_list = [
            {
                'experiment_name': 'experiment_1',
                'model_name': 'ANNMalware_Model1',
                'batch_size': 256,
                'image_dim': 128,
                'epochs': 10,
                'lr': 0.001,
            }
        ]
        return get_deep_feedforward_expr_list
    else:
        keys, values = zip(*get_deep_feedforward_expr_grid.items())
        permutations_dicts = []
        count = 1
        for v in itertools.product(*values):
            temp_dict = dict(zip(keys, v))
            temp_exp = 'experiment_' + str(count)
            temp_dict['experiment_name'] = temp_exp
            permutations_dicts.append(temp_dict)
            count += 1

        return permutations_dicts


def get_shallow_expr_list():
    list_shallow_expr = [
        {
            'experiment_name': 'XGB_experiment_1',
            'model_name': 'XGB',
            'param_grid': {
                'max_depth': [5, 15, 20, 50, 100],
                'learning_rate': [0.1, 0.01, 0.001],
                'n_estimators': list(range(10, 500, 50)),
            }
        },
        {
            'experiment_name': 'RandomForest_experiment_1',
            'model_name': 'RandomForest',
            'param_grid': {
                'criterion': ['gini', 'entropy'],
                'n_estimators': [10, 40, 100, 500],
            }
        },
        {
            'experiment_name': 'Knn_experiment_1',
            'model_name': 'Knn',
            'param_grid': {
                'n_neighbors': list(range(1, 100, 2)),
                'p': [1, 2],
            }
        },
        {
            'experiment_name': 'Knn_experiment_2',
            'model_name': 'Knn',
            'param_grid': {
                'n_neighbors': list(range(1, 100, 2)),
                'p': [2],
            }
        }
    ]

    return list_shallow_expr


def get_malware_experiments_list(expr_type):
    expr_list = None
    if expr_type == DEEP_FF:
        expr_list = get_deep_feedforward_expr_list()
    if expr_type == DEEP_RNN:
        expr_list = get_deep_rnn_expr_list()
    if expr_type == SHALLOW_ML:
        expr_list = get_shallow_expr_list()

    if expr_list is None:
        raise Exception('Unknown experiment type')
    else:
        return expr_list


def create_deep_image_model(model_params):
    image_dim = model_params['image_dim']
    num_of_classes = model_params['num_of_classes']
    model_name = model_params['model_name']

    model = None
    if model_name == 'CNNMalware_Model1':
        model = CNNMalware_Model1(image_dim=image_dim, num_of_classes=num_of_classes).to(device)
    if model_name == 'CNNMalware_Model2':
        model = CNNMalware_Model2(image_dim=image_dim, num_of_classes=num_of_classes).to(device)

    if model_name == 'ANNMalware_Model1':
        model = ANNMalware_Model1(image_dim=image_dim, num_of_classes=num_of_classes).to(device)
    if model_name == 'ANNMalware_Model2':
        model = ANNMalware_Model2(image_dim=image_dim, num_of_classes=num_of_classes).to(device)

    if model is None:
        raise Exception("Unknown Deep image model name given")
    return model


def create_deep_opcode_model(model_params):
    input_dim = model_params['input_dim']
    output_dim = model_params['output_dim']
    embedding_dim = model_params['embedding_dim']
    hidden_dim = model_params['hidden_dim']
    batch_size = model_params['batch_size']
    num_of_classes = model_params['num_of_classes']
    model_name = model_params['model_name']
    num_layers = model_params['num_layers']
    bidirectional = model_params['bidirectional']

    model = None
    if model_name == 'RNNMalware_Model1':
        dropout = model_params['dropout']
        model = RNNMalware_Model1(input_dim=input_dim, embedding_dim=embedding_dim, hidden_dim=hidden_dim,
                                  output_dim=output_dim, batch_size=batch_size,
                                  num_layers=num_layers, bidirectional=bidirectional, dropout=dropout)

    if model_name == 'LSTMMalware_Model2':
        model = LSTMMalware_Model1(input_dim, embedding_dim, hidden_dim, output_dim, batch_size)

    if model is None:
        raise Exception("Unknown RNN Model name given")

    return model


def create_deep_model(model_params):
    model = None
    if 'image_dim' in model_params.keys():
        model = create_deep_image_model(model_params)
    else:
        model = create_deep_opcode_model(model_params)

    if model is None:
        raise Exception("Unknown Model name given")
    return model


def create_shallow_model(model_params=None):
    model_name = model_params['model_name']
    param_grid = model_params['param_grid']
    model = None
    gsc = None

    if model_name == 'XGB':
        model = xgb.XGBClassifier()
    if model_name == 'RandomForest':
        model = RandomForestClassifier()
    if model_name == 'Knn':
        model = KNeighborsClassifier()

    gsc = GridSearchCV(estimator=model, param_grid=param_grid,
                       cv=5, scoring='accuracy', verbose=1, n_jobs=-1, refit=True)
    if model is None or gsc is None:
        raise Exception("Unknown Model name given")
    return model, gsc
