from models.CnnModels import *
from models.AnnModels import *
from data_utils.data_loaders import *
from models.model_trainers_testers import *
from sklearn.model_selection import GridSearchCV
import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier


def create_deep_feedforward_model(model_params):
    image_dim = model_params['image_dim']
    num_of_classes = model_params['num_of_classes']
    model_name = model_params['model_name']

    model = None
    if model_name == 'CNNMalware_Model1':
        model = CNNMalware_Model1(image_dim=image_dim, num_of_classes=num_of_classes).to(device)
    if model_name == 'CNNMalware_Model2':
        model = CNNMalware_Model2(image_dim=image_dim, num_of_classes=num_of_classes).to(device)

    if model_name == 'ANNMalware_Model1':
        model = ANNMalware_Model1(image_dim=image_dim, num_of_classes=num_of_classes).to(device)
    if model_name == 'ANNMalware_Model2':
        model = ANNMalware_Model2(image_dim=image_dim, num_of_classes=num_of_classes).to(device)

    if model is None:
        raise Exception("Unknown Model name given")
    return model


def create_shallow_model(model_params=None):
    model_name = model_params['model_name']
    param_grid = model_params['param_grid']
    model = None
    gsc = None

    if model_name == 'XGB':
        model = xgb.XGBClassifier()
    if model_name == 'RandomForest':
        model = RandomForestClassifier()
    if model_name == 'Knn':
        model = KNeighborsClassifier()

    gsc = GridSearchCV(estimator=model, param_grid=param_grid,
                       cv=5, scoring='accuracy', verbose=1, n_jobs=-1, refit=True)
    if model is None or gsc is None:
        raise Exception("Unknown Model name given")
    return model, gsc
