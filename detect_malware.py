import random
from datetime import datetime
from models.models_utils import *
from utils import *


def setup():
    current_time_str = str(datetime.now().strftime("%d-%b-%Y_%H_%M_%S"))
    LOG_DIR = os.path.join(LOG_MASTER_DIR, current_time_str)
    os.makedirs(LOG_DIR)
    return LOG_DIR


def execute_ann_malware_detect(model_params, LOG_DIR):
    print(f'Model params: {model_params}')

    batch_size = model_params['batch_size']
    image_dim = model_params['image_dim']
    data_path = get_datapath(image_dim)
    train_loader, val_loader, dataset_len, class_names = get_data_loaders(data_path=data_path,
                                                                          image_dim=image_dim,
                                                                          batch_size=batch_size)

    train_set_len = len(train_loader) * batch_size
    val_set_len = len(val_loader) * batch_size
    num_of_classes = len(class_names)

    model_params['num_of_classes'] = num_of_classes

    print(f'Training images available: {train_set_len}')
    print(f'Validation images available: {val_set_len}')
    print(f'Total images available: {dataset_len}')
    print(f'Number of classes: {num_of_classes}')

    model = create_model(model_params)
    criterion = nn.CrossEntropyLoss()

    model, train_losses, train_accuracy = train_ann_model(model=model, model_params=model_params, criterion=criterion,
                                                          train_loader=train_loader, log_dir=LOG_DIR)
    test_accuracy = test_ann_model(model=model, model_params=model_params, criterion=criterion,
                                   val_loader=val_loader)

    print(f'Test accuracy: {test_accuracy:7.4f}%')

    model_params['train_accuracy'] = train_accuracy[-1]
    model_params['test_accuracy'] = test_accuracy
    save_model_to_log(model, model_params, train_losses, train_accuracy, LOG_DIR)


def process_deep_learning(LOG_DIR):
    list_of_model_params = [
        {
            'experiment_name': 'experiment_1',
            'model_name': 'CNNMalware_Model1',
            'batch_size': 64,
            'image_dim': 1024,
            'epochs': 2,
            'lr': 0.001
        },
        {
            'experiment_name': 'experiment_2',
            'model_name': 'CNNMalware_Model1',
            'batch_size': 64,
            'image_dim': 64,
            'epochs': 2,
            'lr': 0.001
        }
    ]

    for ml in list_of_model_params:
        print_line()
        print(f'Executing : {ml["experiment_name"]}')
        print_line()
        execute_ann_malware_detect(ml, LOG_DIR)


def main(LOG_DIR):
    process_deep_learning(LOG_DIR)


def print_banner(LOG_DIR):
    print_line()
    if use_cuda:
        print('Using GPU:', torch.cuda.get_device_name(torch.cuda.current_device()))
    else:
        print('Running on :', device)

    print(f'LOG_DIR = {LOG_DIR}')
    print_line()

if __name__ == '__main__':
    LOG_DIR = setup()
    print_banner(LOG_DIR)
    main(LOG_DIR)
