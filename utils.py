from config import *
import os
import pickle
import matplotlib.pyplot as plt
import sklearn.metrics as metrics
import seaborn as sns
import pandas as pd


def save_model_results_to_log(model=None, model_params=None,
                              train_losses=None, train_accuracy=None,
                              predicted=None, ground_truth=None,
                              log_dir=None):
    experiment_name = model_params['experiment_name']
    model_name = model_params['model_name']
    num_of_classes = model_params['num_of_classes']
    class_names = model_params['class_names']

    model_log_dir = os.path.join(log_dir, experiment_name)
    os.mkdir(model_log_dir)
    model_log_file = os.path.join(model_log_dir, MODEL_INFO_LOG)
    model_train_losses_log_file = os.path.join(model_log_dir, MODEL_LOSS_INFO_LOG)
    model_train_accuracy_log_file = os.path.join(model_log_dir, MODEL_ACC_INFO_LOG)
    model_save_path = os.path.join(model_log_dir, model_name + '.pt')
    model_conf_mat_csv = os.path.join(model_log_dir, MODEL_CONF_MATRIX_CSV)
    model_conf_mat_png = os.path.join(model_log_dir, MODEL_CONF_MATRIX_PNG)
    model_conf_mat_normalized_csv = os.path.join(model_log_dir, MODEL_CONF_MATRIX_NORMALIZED_CSV)
    model_conf_mat_normalized_png = os.path.join(model_log_dir, MODEL_CONF_MATRIX_NORMALIZED_PNG)

    model_loss_png = os.path.join(model_log_dir, MODEL_LOSS_PNG)
    model_accuracy_png = os.path.join(model_log_dir, MODEL_ACCURACY_PNG)

    # generate and save confusion matrix
    plot_x_label = "Predictions"
    plot_y_label = "Actual"
    cmap = plt.cm.Blues
    ground_truth_series = pd.Series(ground_truth, name='Actual')
    predicted_series = pd.Series(predicted, name='Predicted')

    df_confusion = pd.crosstab(ground_truth_series, predicted_series)
    df_confusion.index = class_names
    df_confusion.columns = class_names
    df_confusion.to_csv(model_conf_mat_csv)
    plt.figure(figsize=(20, 20))
    sns.heatmap(df_confusion, annot=True, cmap=cmap)
    plt.xlabel(plot_x_label)
    plt.ylabel(plot_y_label)
    plt.title('Confusion Matrix')
    plt.savefig(model_conf_mat_png)

    df_confusion = pd.crosstab(ground_truth_series, predicted_series).apply(lambda r: round(r / r.sum(), 2), axis=1)
    df_confusion.index = class_names
    df_confusion.columns = class_names
    df_confusion.to_csv(model_conf_mat_normalized_csv)
    plt.figure(figsize=(20, 20))
    sns.heatmap(df_confusion, annot=True, cmap=cmap)
    plt.xlabel(plot_x_label)
    plt.ylabel(plot_y_label)
    plt.title('Normalized Confusion Matrix')
    plt.savefig(model_conf_mat_normalized_png)

    report = metrics.classification_report(ground_truth, predicted, labels=class_names)

    plt.figure(figsize=(8, 8))
    plt.plot(train_losses, label='Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training Loss')
    plt.legend()
    plt.savefig(model_loss_png)

    plt.figure(figsize=(8, 8))
    plt.plot(train_accuracy, label='Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.title('Training Accuracy')
    plt.legend()
    plt.savefig(model_accuracy_png)

    # save model arch and params
    with open(model_log_file, 'w') as file:
        file.write('-' * 30 + '\n')
        file.write('model architecture' + '\n')
        file.write('-' * 30 + '\n')
        file.write(str(model) + '\n')
        file.write('-' * 30 + '\n')
        file.write('model params' + '\n')
        file.write('-' * 30 + '\n')
        file.write(str(model_params) + '\n')
        file.write('-' * 30 + '\n')
        file.write('classification report' + '\n')
        file.write('-' * 30 + '\n')
        file.write(report + '\n')
        file.write('-' * 30 + '\n')
        file.flush()

    # save model training stats
    with open(model_train_losses_log_file, 'wb') as file:
        pickle.dump(train_losses, file)
        file.flush()

    with open(model_train_accuracy_log_file, 'wb') as file:
        pickle.dump(train_accuracy, file)
        file.flush()

    # save model as pytorch state dict
    torch.save(model.state_dict(), model_save_path)


def save_models_metadata_to_log(list_of_model_params, LOG_DIR, logfile=MODEL_META_INFO_LOG):
    logfile = os.path.join(LOG_DIR, logfile)
    with open(logfile, 'w') as file:
        file.write('-' * 30 + '\n')
        file.write('Models Metadata' + '\n')
        file.write('-' * 30 + '\n')
        file.write(str(list_of_model_params) + '\n')
        file.flush()


def print_line(print_len=30):
    print('-' * print_len)
