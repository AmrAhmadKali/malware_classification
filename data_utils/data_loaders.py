import random

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
from torchvision.utils import make_grid
from config import *
import numpy as np


def get_datapath(image_dim):
    if image_dim == 0:
        return ORG_DATASET_PATH0
    if image_dim == 1:
        return ORG_DATASET_PATH1
    if image_dim == 64:
        return ORG_DATASET_PATH64
    if image_dim == 128:
        return ORG_DATASET_PATH128
    if image_dim == 256:
        return ORG_DATASET_PATH256
    if image_dim == 512:
        return ORG_DATASET_PATH512
    if image_dim == 1024:
        return ORG_DATASET_PATH1024

    raise Exception("Unknown Image dim given")


def get_data_loaders(data_path=ORG_DATASET_PATH64, image_dim=64, train_split=0.8, batch_size=256):
    workers_count = int(CPU_COUNT * 0.80)

    transform = transforms.Compose([
        # transforms.RandomRotation(10),
        transforms.Grayscale(num_output_channels=1),
        transforms.Resize((image_dim, image_dim)),
        transforms.ToTensor(),
    ])

    dataset = datasets.ImageFolder(data_path, transform=transform)
    dataset_len = len(dataset)
    # dataset_len = 1000
    indices = list(range(dataset_len))

    random.shuffle(indices)
    split = int(np.floor(train_split * dataset_len))

    train_loader = torch.utils.data.DataLoader(
        dataset, batch_size=batch_size,
        sampler=torch.utils.data.sampler.SubsetRandomSampler(indices[:split]),
        num_workers=workers_count)

    val_loader = torch.utils.data.DataLoader(
        dataset, batch_size=batch_size,
        sampler=torch.utils.data.sampler.SubsetRandomSampler(indices[split:dataset_len]),
        num_workers=workers_count)

    train_set_len = len(train_loader) * batch_size
    val_set_len = len(val_loader) * batch_size
    class_names = dataset.classes
    num_of_classes = len(dataset.classes)

    return train_loader, val_loader, dataset_len, class_names
