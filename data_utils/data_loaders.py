import random

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
from torchvision.utils import make_grid
from config import *
import numpy as np


def get_data_loaders(data_path=ORG_DATASET64_PATH, image_dim=64, train_split=0.8, batch_size=256):
    transform = transforms.Compose([
        # transforms.RandomRotation(10),
        transforms.Grayscale(num_output_channels=1),
        transforms.Resize((image_dim, image_dim)),
        transforms.ToTensor(),
    ])

    dataset = datasets.ImageFolder(data_path, transform=transform)
    dataset_len = len(dataset)
    #dataset_len = 100
    indices = list(range(dataset_len))


    random.shuffle(indices)
    split = int(np.floor(train_split * dataset_len))

    print(f'split = {split}')
    train_loader = torch.utils.data.DataLoader(
        dataset, batch_size=batch_size,
        sampler=torch.utils.data.sampler.SubsetRandomSampler(indices[:split]),
        num_workers=CPU_COUNT)

    val_loader = torch.utils.data.DataLoader(
        dataset, batch_size=batch_size,
        sampler=torch.utils.data.sampler.SubsetRandomSampler(indices[split:dataset_len]),
        num_workers=CPU_COUNT)

    train_set_len = len(train_loader) * batch_size
    val_set_len = len(val_loader) * batch_size
    class_names = dataset.classes
    num_of_classes = len(dataset.classes)

    return train_loader, val_loader, dataset_len, class_names
