import multiprocessing
import pefile
import os
import hashlib
import array
import math
from tqdm import tqdm
import numpy as np
import imageio
from config import *


def get_md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def get_entropy(data):
    if len(data) == 0:
        return 0.0
    occurences = array.array('L', [0] * 256)
    for x in data:
        occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x * math.log(p_x, 2)

    return entropy


def get_resources(pe):
    """Extract resources :
    [entropy, size]"""
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData,
                                                   resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)

                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources


def get_version_info(pe):
    """Return version infos"""
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
        res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
        res['os'] = pe.VS_FIXEDFILEINFO.FileOS
        res['type'] = pe.VS_FIXEDFILEINFO.FileType
        res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
        res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
        res['signature'] = pe.VS_FIXEDFILEINFO.Signature
        res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res


def extract_infos(fpath):
    res = []
    res.append(os.path.basename(fpath))
    res.append(get_md5(fpath))
    pe = pefile.PE(fpath)
    res.append(pe.FILE_HEADER.Machine)
    res.append(pe.FILE_HEADER.SizeOfOptionalHeader)
    res.append(pe.FILE_HEADER.Characteristics)
    res.append(pe.OPTIONAL_HEADER.MajorLinkerVersion)
    res.append(pe.OPTIONAL_HEADER.MinorLinkerVersion)
    res.append(pe.OPTIONAL_HEADER.SizeOfCode)
    res.append(pe.OPTIONAL_HEADER.SizeOfInitializedData)
    res.append(pe.OPTIONAL_HEADER.SizeOfUninitializedData)
    res.append(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
    res.append(pe.OPTIONAL_HEADER.BaseOfCode)
    try:
        res.append(pe.OPTIONAL_HEADER.BaseOfData)
    except AttributeError:
        res.append(0)
    res.append(pe.OPTIONAL_HEADER.ImageBase)
    res.append(pe.OPTIONAL_HEADER.SectionAlignment)
    res.append(pe.OPTIONAL_HEADER.FileAlignment)
    res.append(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)
    res.append(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion)
    res.append(pe.OPTIONAL_HEADER.MajorImageVersion)
    res.append(pe.OPTIONAL_HEADER.MinorImageVersion)
    res.append(pe.OPTIONAL_HEADER.MajorSubsystemVersion)
    res.append(pe.OPTIONAL_HEADER.MinorSubsystemVersion)
    res.append(pe.OPTIONAL_HEADER.SizeOfImage)
    res.append(pe.OPTIONAL_HEADER.SizeOfHeaders)
    res.append(pe.OPTIONAL_HEADER.CheckSum)
    res.append(pe.OPTIONAL_HEADER.Subsystem)
    res.append(pe.OPTIONAL_HEADER.DllCharacteristics)
    res.append(pe.OPTIONAL_HEADER.SizeOfStackReserve)
    res.append(pe.OPTIONAL_HEADER.SizeOfStackCommit)
    res.append(pe.OPTIONAL_HEADER.SizeOfHeapReserve)
    res.append(pe.OPTIONAL_HEADER.SizeOfHeapCommit)
    res.append(pe.OPTIONAL_HEADER.LoaderFlags)
    res.append(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes)
    res.append(len(pe.sections))
    entropy = list(map(lambda x: x.get_entropy(), pe.sections))
    if len(entropy) > 0:
        res.append(sum(entropy) / float(len(entropy)))
        res.append(min(entropy))
        res.append(max(entropy))
    else:
        res.append(0)
        res.append(0)
        res.append(0)

    raw_sizes = list(map(lambda x: x.SizeOfRawData, pe.sections))
    if len(raw_sizes) > 0:
        res.append(sum(raw_sizes) / float(len(raw_sizes)))
        res.append(min(raw_sizes))
        res.append(max(raw_sizes))
    else:
        res.append(0)
        res.append(0)
        res.append(0)

    virtual_sizes = list(map(lambda x: x.Misc_VirtualSize, pe.sections))
    if len(virtual_sizes) > 0:
        res.append(sum(virtual_sizes) / float(len(virtual_sizes)))
        res.append(min(virtual_sizes))
        res.append(max(virtual_sizes))
    else:
        res.append(0)
        res.append(0)
        res.append(0)
    # Imports
    try:
        res.append(len(pe.DIRECTORY_ENTRY_IMPORT))
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        res.append(len(imports))
        res.append(len(list(filter(lambda x: x.name is None, imports))))
    except AttributeError:
        res.append(0)
        res.append(0)
        res.append(0)
    # Exports
    try:
        res.append(len(pe.DIRECTORY_ENTRY_EXPORT.symbols))
    except AttributeError:
        # No export
        res.append(0)
    # Resources
    resources = get_resources(pe)
    res.append(len(resources))
    if len(resources) > 0:
        entropy = list(map(lambda x: x[0], resources))
        res.append(sum(entropy) / float(len(entropy)))
        res.append(min(entropy))
        res.append(max(entropy))
        sizes = list(map(lambda x: x[1], resources))
        res.append(sum(sizes) / float(len(sizes)))
        res.append(min(sizes))
        res.append(max(sizes))
    else:
        res.append(0)
        res.append(0)
        res.append(0)
        res.append(0)
        res.append(0)
        res.append(0)

    # Load configuration size
    try:
        res.append(pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size)
    except AttributeError:
        res.append(0)

    # Version configuration size
    try:
        version_infos = get_version_info(pe)
        res.append(len(version_infos.keys()))
    except AttributeError:
        res.append(0)
    return res


def collect_features(path, class_id, class_name, max_files=0, max_size=0):
    count = 0
    list_of_res = []
    for ffile in os.listdir(path):
        full_name = os.path.join(path, ffile)
        # print(full_name)
        statinfo = os.stat(full_name)
        if max_size != 0 and statinfo.st_size > max_size:
            continue
        try:
            res = extract_infos(full_name)
            res.append(class_id)
            res.append(class_name)
            count += 1
            if max_files > 0 and count > max_files:
                break
        except pefile.PEFormatError:
            # print(f'PE format is invalid for {full_name}')
            pass
        list_of_res.append(res)
    return count, list_of_res


def extract_features(features_cvs_filename, count_cvs_filename, path_to_samples, max_files=15000, max_size=5242880):
    features_columns = [
        "Name",
        "md5",
        "Machine",
        "SizeOfOptionalHeader",
        "Characteristics",
        "MajorLinkerVersion",
        "MinorLinkerVersion",
        "SizeOfCode",
        "SizeOfInitializedData",
        "SizeOfUninitializedData",
        "AddressOfEntryPoint",
        "BaseOfCode",
        "BaseOfData",
        "ImageBase",
        "SectionAlignment",
        "FileAlignment",
        "MajorOperatingSystemVersion",
        "MinorOperatingSystemVersion",
        "MajorImageVersion",
        "MinorImageVersion",
        "MajorSubsystemVersion",
        "MinorSubsystemVersion",
        "SizeOfImage",
        "SizeOfHeaders",
        "CheckSum",
        "Subsystem",
        "DllCharacteristics",
        "SizeOfStackReserve",
        "SizeOfStackCommit",
        "SizeOfHeapReserve",
        "SizeOfHeapCommit",
        "LoaderFlags",
        "NumberOfRvaAndSizes",
        "SectionsNb",
        "SectionsMeanEntropy",
        "SectionsMinEntropy",
        "SectionsMaxEntropy",
        "SectionsMeanRawsize",
        "SectionsMinRawsize",
        "SectionMaxRawsize",
        "SectionsMeanVirtualsize",
        "SectionsMinVirtualsize",
        "SectionMaxVirtualsize",
        "ImportsNbDLL",
        "ImportsNb",
        "ImportsNbOrdinal",
        "ExportNb",
        "ResourcesNb",
        "ResourcesMeanEntropy",
        "ResourcesMinEntropy",
        "ResourcesMaxEntropy",
        "ResourcesMeanSize",
        "ResourcesMinSize",
        "ResourcesMaxSize",
        "LoadConfigurationSize",
        "VersionInformationSize",
        "Malware_ClassID",
        "Malware_ClassName"
    ]

    csv_delimiter = ','
    features_cvs_file = open(features_cvs_filename, "w")
    features_cvs_file.write(csv_delimiter.join(features_columns) + "\n")

    count_cvs_file = open(count_cvs_filename, "w")
    count_columns = ['class_name', 'total_samples']
    count_cvs_file.write(csv_delimiter.join(count_columns) + "\n")

    class_names = os.listdir(path_to_samples)
    class_count = len(class_names)

    for class_id in tqdm(range(class_count), desc='Extracting features from Malware samples'):
        sub_dir = os.path.join(path_to_samples, class_names[class_id])
        total_samples, list_of_res = collect_features(sub_dir, class_id, class_names[class_id], max_files, max_size)
        for res in list_of_res:
            features_cvs_file.write(csv_delimiter.join(map(lambda x: str(x), res)) + "\n")
        count_cvs_file.write(class_names[class_id] + csv_delimiter + str(total_samples) + "\n")
        features_cvs_file.flush()
        count_cvs_file.flush()

    features_cvs_file.close()
    count_cvs_file.close()


def generate_and_save_image(input_filename, output_filename, width):
    f = open(input_filename, 'rb')
    ln = os.path.getsize(input_filename)  # length of file in bytes
    if width == 0:
        width = ln
    rem = ln % width
    a = array.array("B")  # uint8 array
    a.fromfile(f, ln - rem)
    f.close()
    g = np.reshape(a, (len(a) // width, width))
    g = np.uint8(g)
    imageio.imwrite(output_filename, g)  # save the image


def convert_bin_to_img(input_dir, width, max_files=0):
    output_dir = input_dir + '_width_' + str(width)
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)

    list_dirs = os.listdir(input_dir)
    with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:

        jobs = []
        results = []
        total_count = 0

        for dirname in list_dirs:
            list_files = os.listdir(os.path.join(input_dir, dirname))
            count = 0
            for filename in list_files:
                input_filename = os.path.join(input_dir, dirname, filename)
                try:
                    output_filename = os.path.splitext(os.path.basename(input_filename))[0] + '.png'
                    output_class_dir = os.path.join(output_dir, dirname)
                    if not os.path.isdir(output_class_dir):
                        os.mkdir(output_class_dir)
                    output_filename = os.path.join(output_dir, dirname, output_filename)

                    jobs.append(
                        pool.apply_async(generate_and_save_image, (input_filename, output_filename, width)))
                    count += 1
                    if max_files > 0 and max_files == count:
                        break
                except:
                    print('Ignoring ', filename)

            total_count += count
        tqdm_desc = 'Converting Malware bins to images for width ' + str(width)
        for job in tqdm(jobs, desc=tqdm_desc):
            results.append(job.get())


def main():
    print(f'DATA_CSV_FILENAME {ORG_DATASET_PATH}')

    max_files = 0  # set 0 to process all files or set a specific number

    extract_features(ORG_DATASET_FEATURES_CSV, ORG_DATASET_COUNT_CSV, ORG_DATASET_PATH, max_files=max_files)

    list_of_widths = [0, 1, 64, 128, 256, 512, 1024]
    for width in list_of_widths:
        convert_bin_to_img(ORG_DATASET_PATH, width, max_files=max_files)


if __name__ == "__main__":
    main()
